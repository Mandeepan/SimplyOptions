"""empty message

Revision ID: 3d5ba49bde6f
Revises:
Create Date: 2024-12-15 15:20:51.025190

"""

from alembic import op
import sqlalchemy as sa
import os

environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")


# revision identifiers, used by Alembic.
revision = "3d5ba49bde6f"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "companies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("company_name", sa.String(), nullable=False),
        sa.Column("short_description", sa.String(), nullable=True),
        sa.Column("ai_prompt", sa.String(), nullable=True),
        sa.Column("founded_year", sa.Integer(), nullable=True),
        sa.Column("api_identifier", sa.String(), nullable=True),
        sa.Column("location_identifiers", sa.String(), nullable=True),
        sa.Column("categories", sa.String(), nullable=True),
        sa.Column("num_employees_enum", sa.String(), nullable=True),
        sa.Column("revenue_range", sa.String(), nullable=True),
        sa.Column("operating_status", sa.String(), nullable=True),
        sa.Column("website_url", sa.String(), nullable=True),
        sa.Column("logo_url", sa.String(), nullable=True),
        sa.Column("investors", sa.String(), nullable=True),
        sa.Column("created_at_et", sa.DateTime(), nullable=True),
        sa.Column("updated_at_et", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.String(length=40), nullable=False),
        sa.Column("last_name", sa.String(length=40), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("hashed_password", sa.String(length=255), nullable=False),
        sa.Column("user_cash_balance", sa.Float(precision=2), nullable=True),
        sa.Column("amount_to_be_debited", sa.Float(precision=2), nullable=True),
        sa.Column("amount_to_be_credited", sa.Float(precision=2), nullable=True),
        sa.Column("user_available_balance", sa.Float(precision=2), nullable=True),
        sa.Column("is_issuer", sa.Boolean(), nullable=True),
        sa.Column("company_id", sa.Integer(), nullable=True),
        sa.Column("created_on_et", sa.Date(), nullable=True),
        sa.Column("created_at_et", sa.DateTime(), nullable=True),
        sa.Column("updated_at_et", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "instruments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("company_id", sa.Integer(), nullable=False),
        sa.Column("instrument_name", sa.String(), nullable=False),
        sa.Column("issuer_user_id", sa.Integer(), nullable=True),
        sa.Column("issued_on_et", sa.Date(), nullable=False),
        sa.Column("instrument_type", sa.String(), nullable=False),
        sa.Column("instrument_class", sa.String(), nullable=False),
        sa.Column("updated_value", sa.Float(precision=2), nullable=True),
        sa.Column("updated_issued_quantity", sa.Integer(), nullable=True),
        sa.Column("updated_price", sa.Float(precision=2), nullable=False),
        sa.Column("created_at_et", sa.DateTime(), nullable=True),
        sa.Column("updated_at_et", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["issuer_user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "instrument_prices",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("instrument_id", sa.Integer(), nullable=False),
        sa.Column("recorded_on_et", sa.Date(), nullable=True),
        sa.Column("recorded_price", sa.Float(precision=2), nullable=False),
        sa.Column("created_at_et", sa.DateTime(), nullable=True),
        sa.Column("updated_at_et", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instruments.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "listings",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("instrument_id", sa.Integer(), nullable=False),
        sa.Column("listing_user_id", sa.Integer(), nullable=False),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("listed_price", sa.Float(precision=2), nullable=False),
        sa.Column("initial_quantity", sa.Integer(), nullable=False),
        sa.Column("remaining_quantity", sa.Integer(), nullable=True),
        sa.Column("listed_on_et", sa.DateTime(), nullable=True),
        sa.Column("settled_on_et", sa.Date(), nullable=True),
        sa.Column("created_at_et", sa.DateTime(), nullable=True),
        sa.Column("updated_at_et", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instruments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["listing_user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "offers",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("instrument_id", sa.Integer(), nullable=False),
        sa.Column("offer_user_id", sa.Integer(), nullable=False),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("offered_price", sa.Float(precision=2), nullable=False),
        sa.Column("initial_quantity", sa.Integer(), nullable=False),
        sa.Column("remaining_quantity", sa.Integer(), nullable=True),
        sa.Column("offered_on_et", sa.DateTime(), nullable=True),
        sa.Column("settled_on_et", sa.Date(), nullable=True),
        sa.Column("created_at_et", sa.DateTime(), nullable=True),
        sa.Column("updated_at_et", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instruments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["offer_user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "documents",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("listing_id", sa.Integer(), nullable=False),
        sa.Column("offer_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("doc_url", sa.String(), nullable=True),
        sa.Column("created_at_et", sa.DateTime(), nullable=True),
        sa.Column("updated_at_et", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["listing_id"],
            ["listings.id"],
        ),
        sa.ForeignKeyConstraint(
            ["offer_id"],
            ["offers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transactions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("instrument_id", sa.Integer(), nullable=False),
        sa.Column("offer_id", sa.Integer(), nullable=False),
        sa.Column("listing_id", sa.Integer(), nullable=False),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("transaction_price", sa.Float(precision=2), nullable=False),
        sa.Column("transaction_quantity", sa.Integer(), nullable=True),
        sa.Column("settled_on_et", sa.Date(), nullable=True),
        sa.Column("transaction_fee", sa.Float(precision=2), nullable=False),
        sa.Column("created_at_et", sa.DateTime(), nullable=True),
        sa.Column("updated_at_et", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instruments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["listing_id"],
            ["listings.id"],
        ),
        sa.ForeignKeyConstraint(
            ["offer_id"],
            ["offers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###
    if environment == "production":
        op.execute(f"ALTER TABLE transactions SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE documents SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE offers SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE listings SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE instrument_prices SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE instruments SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE companies SET SCHEMA {SCHEMA};")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("transactions")
    op.drop_table("documents")
    op.drop_table("offers")
    op.drop_table("listings")
    op.drop_table("instrument_prices")
    op.drop_table("instruments")
    op.drop_table("users")
    op.drop_table("companies")
    # ### end Alembic commands ###
